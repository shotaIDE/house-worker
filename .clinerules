# House Worker プロジェクトコーディングルール

## 状態管理

### Riverpod の使用

- 状態管理には Riverpod を使用する
- プロバイダーは `@riverpod` アノテーションを使用したコード生成を利用して定義する

## 非同期処理

### Riverpod での非同期処理

- 複数の非同期プロバイダーを扱う場合、状態リセットを防ぐために全てのプロバイダーを先に `watch` してから後で `await` する

例:

```dart
final data1Future = ref.watch(provider1.future);
final data2Future = ref.watch(provider2.future);

final data1 = await data1Future;
final data2 = await data2Future;
```

### ストリーム処理

- ストリームベースのデータ取得には `Stream` を使用する

## コード構造とスタイル

### 関数型プログラミングの活用

- コレクション操作には `map`, `where`, `fold`, `expand` などの関数型メソッドを使用する
- 複雑なデータ変換は複数のステップに分けて可読性を高める
- コレクションの変換時は、変換された新しいコレクションが返却される処理を使用する
  - 例: `collection` パッケージの `sortedBy` など

### コメント

- コメントは日本語で記述する
- 特に重要な注意点や落とし穴については理由も含めて詳細に記述する

### 命名規則

- 変数名はその目的や内容を明確に表す名前をつける
- 一時変数でも意味のある名前をつける

## クラス設計

### データモデル

- データモデルは明確に分離し、適切なファイルに配置する
- freezed を利用したイミュータブルなデータモデルを定義する

## エラー処理

### 非同期エラー

- 非同期処理のエラーは適切にキャッチし、ユーザーに通知する
- ストリームのエラー状態は `Stream.error()` で適切に処理する

## UI 関連

### 表示・非表示の状態管理

- UI 要素の表示・非表示状態は専用の状態管理クラスで管理する
- 状態変更のロジックはプレゼンターに実装する
